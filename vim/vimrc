" Vimrc
" David Zhou
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

set nocompatible
set background=dark
color ir_black
syntax on
filetype plugin indent on
set shm=atI "disable intro screen
set ttyfast " Improves redrawing for newer computers
set mouse=a
scriptencoding utf-8
set virtualedit=onemore
set history=1000
set nofoldenable " disable code folding
set display=lastline,uhex
set switchbuf=useopen

set backup
set backupdir=$HOME/.vimbackup//
set directory=$HOME/.vimswap//
" Create directories if they don't exist
silent execute '!mkdir -p $HOME/.vimbackup'
silent execute '!mkdir -p $HOME/.vimswap'

"typos sucks
command! -bang -nargs=* W w<bang> <args>
command! -bang -nargs=* Q q<bang> <args>
command! -bang -nargs=* Wq wq<bang> <args>
command! -bang -nargs=* WQ wq<bang> <args>

set showmode " display the current mode
set cursorline "highlight current line
set showcmd
set wildmode=longest,list,full
set wildmenu
set completeopt=menu

set wildignore+=*.o,*.fasl,CVS,*.pyc,._*,.DS_Store,*~,*.gif,*.jpg,*.png,*.pdf,*.psd,*.svn,.svn,.git,.hg

set ruler
set number
set nuw=4
set vb "set visual bell
set binary noeol
set backspace=indent,eol,start
set laststatus=2
set showmatch

set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=8

set bs=2

"change softwrap to sane setting
set wrap linebreak textwidth=0

"set mapleader
let mapleader = ","
let g:mapleader = ","

" allow buffers to be fully squashed
set winminheight=0
set hidden

nnoremap ' `
nnoremap ` '

"scrolling offset
set scrolloff=3
set shortmess=atI

"turn off middleclicking
noremap <MiddleMouse> <LeftMouse>
noremap <2-MiddleMouse> <LeftMouse>
noremap <3-MiddleMouse> <LeftMouse>
noremap <4-MiddleMouse> <LeftMouse>

"Set to auto read when a file is changed from the outside
set autoread

" make tab key more better
noremap <tab> v>
noremap <s-tab> v<
vnoremap <tab> >gv
vnoremap <s-tab> <gv

inoremap jj <esc>l
cnoremap jj <c-c>l

" sudo write
map w! w !sudo tee % >/dev/null

"map control/command arrows for moving between windows
map <C-up> <C-W><up>
map <C-down> <C-W><down>
map <C-left> <C-W><left>
map <C-right> <C-W><right>
"these should ideally be in gvimrc; duplicated there
noremap <D-up> <C-W><up>
noremap <D-down> <C-W><down>
noremap <D-left> <C-W><left>
noremap <D-right> <C-W><right>

"map window manipulation to match emacs
noremap <D-1> :only<cr>
noremap <D-0> :close<cr>
noremap <D-2> :sp<cr>
noremap <D-3> :vsp<cr>
noremap! <D-1> <esc>:only<cr>
noremap! <D-0> <esc>:close<cr>
noremap! <D-2> <esc>:sp<cr>
noremap! <D-3> <esc>:vsp<cr>

" map CTRL-E to end-of-line (insert mode)
map <C-e> <esc>$<right><esc>
imap <C-e> <esc>$i<right>
" map CTRL-A to beginning-of-line (insert mode)
map <C-a> <esc>^<esc>
imap <C-a> <esc>^i

ab teh the
ab fro for

set incsearch
set ignorecase
set wrapscan
set smartcase

"easily equalize windows with plus
nmap + <c-w>=

"fast file switching
map <C-q> <esc>:b#<esc>
nmap <C-q> <esc>:b#<cr>
noremap <C-q> <esc>:b#<cr>
noremap! <C-q> <esc>:b#<cr>
map <Leader>; <esc>:b#<esc>
nmap <Leader>; <esc>:b#<cr>
noremap <Leader>; <esc>:b#<cr>
noremap! <Leader>; <esc>:b#<cr>

map <Leader>t :NERDTreeToggle<cr>
map <Leader>m :NERDTreeToggle<cr>
nmap <Leader>e :LustyBufferExplorer<cr>
nmap <Leader>' :LustyBufferExplorer<cr>
nmap <Leader>b :LustyBufferExplorer<cr>

nmap <silent> <Leader>, :CommandT<cr>
nmap <silent> <Leader>r :CommandTFlush<cr>


noremap <D-b> :LustyBufferExplorer<cr>
noremap! <D-b> <esc>:LustyBufferExplorer<cr>
noremap <D-r> :CtrlPMRU<cr>
noremap! <D-r> <esc>:CtrlPMRU<cr>

nmap <Leader>/ :LustyFilesystemExplorerFromHere<cr>
nmap <leader>. :LustyFilesystemExplorer<cr>

" NerdTree options
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1

"CommandT options
let g:CommandTMaxFiles=20000
let g:CommandTMaxHeight=10
let g:CommandTMatchWindowReverse=1

"CtrlP options
let g:ctrlp_working_path_mode = 2
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_mruf_max = 2000
let g:ctrlp_mruf_exclude = '/tmp/.*\|/temp/.*' " MacOSX/Linux
let g:ctrlp_prompt_mappings = {
    \ 'PrtSelectMove("j")':   ['<c-j>', '<c-n>'],
    \ 'PrtSelectMove("k")':   ['<c-k>', '<c-p>'],
    \ 'PrtHistory(-1)':       ['<down>'],
    \ 'PrtHistory(1)':        ['<up>'],
    \ 'PrtClearCache()':      ['<F5>', '<c-r>'],
    \ }


" Tagbar options
noremap <leader>o :TagbarToggle<CR>
set tags=tags,.git/tags,TAGS
let g:tagbar_type_coffee = {
  \ 'kinds' : [
  \   'f:functions',
  \   'o:object'
  \ ],
  \ 'kind2scope' : {
  \  'f' : 'object',
  \   'o' : 'object'
  \},
  \ 'sro' : ".",
  \ 'ctagsbin' : 'coffeetags',
  \ 'ctagsargs' : '--include-vars '
  \}

"No scrollbars
set guioptions-=L
set guioptions-=l
set guioptions-=R
set guioptions-=r

"OmniComplete options and shortcuts
set completeopt=menuone

"Supertab options
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-x><c-n>"
let g:SuperTabCompletionContexts = ['s:ContextDiscover', 's:ContextText']
let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
let g:SuperTabContextDiscoverDiscovery = ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"]

"Gundo options
nnoremap <leader>u :GundoToggle<CR>

" Define a command to make it easier to use
command! -nargs=+ QFDo call QFDo(<q-args>)
" Function that does the work
function! QFDo(command)
    " Create a dictionary so that we can
    " get the list of buffers rather than the
    " list of lines in buffers (easy way
    " to get unique entries)
    let buffer_numbers = {}
    " For each entry, use the buffer number as
    " a dictionary key (won't get repeats)
    for fixlist_entry in getqflist()
        let buffer_numbers[fixlist_entry['bufnr']] = 1
    endfor
    " Make it into a list as it seems cleaner
    let buffer_number_list = keys(buffer_numbers)

    " For each buffer
    for num in buffer_number_list
        " Select the buffer
        exe 'buffer' num
        " Run the command that's passed as an argument
        exe a:command
        " Save if necessary
        update
    endfor
endfunction

command! -nargs=0 -bar Qargs execute 'args ' . QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(values(buffer_numbers))
endfunction

" LANGUAGE OPTIONS
"
"syntax color options for various languages

"syntax coloring for apache log files
autocmd BufRead,BufNewFile *access.log* set filetype=httplog

"tumblr theme syntax coloring -- assumes files in with .tumblr.html
autocmd BufRead,BufNewFile *.tumblr.html setfiletype=tumblr

"Silverstripe ss files are html templates
"So are facebook fbml files
autocmd BufRead,BufNewFile *.ss set filetype=html
autocmd BufRead,BufNewFile *.fbml set filetype=html
"dreamweaver library items are html too
autocmd BufRead,BufNewFile *.lbi set filetype=html
"Disqus dtpl fiels are still html mostly
autocmd BufRead,BufNewFile *.dtpl set filetype=html

"Google Go
autocmd BufRead,BufNewFile *.go set filetype=go

"LOLCODE
autocmd BufRead,BufNewFile *.lol set filetype=lolcodtpl

"I edit actionscript files, not atlas files, whatever the hell they are
autocmd BufRead,BufNewFile *.as set filetype=actionscript

"Json is still javascript
au BufNewFile,BufRead  *.json set filetype=javascript

"language specific options

fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

"ensure no tabs
autocmd BufWritePre * :set expandtab

"PHP
let php_sql_query=1
let php_baselib=1
let php_htmlInStrings=1
let PHP_BracesAtCodeLevel = 0
let PHP_removeCRwhenUnix = 1
let php_noShortTags = 1

"HTML
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

"Python
let g:pyflakes_user_quickfix = 0
autocmd BufRead,BufNewFile *.py set autoindent
autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,with,try,except,finally,def,class

"CSS

"Javascript
" Use Node.js for JavaScript interpretation
let $JS_CMD='node'

"SVNDiff
hi DiffAdd      ctermfg=0 ctermbg=2 guibg='green'
hi DiffDelete   ctermfg=0 ctermbg=1 guibg='red'
hi DiffChange   ctermfg=0 ctermbg=3 guibg='yellow'